/*
문제
게임개발자인 "죠르디"는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
"죠르디"는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.

게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. 
각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 
모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 
게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 
집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 

만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 

크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 
또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. 

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 
크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

문제 접근
크레인이 집어 올린 인형을 바구니의 가장 아래 칸부터 순서대로 쌓는다 
- 바구니는 스택! 같은 모양의 인형 두 개가 바구니에 연속으로 쌓이게 되면 두 인형이 바구니에서 사라진다
- 크레인이 집어 올린 인형을 바구니의 최상단에 위치한 인형과 비교한다!

문제 풀이
moves 배열에 따라 크레인을 좌우로 이동한다.
각 격자의 가장 윗 칸에 인형이 있는지 확인한다.
인형이 없다면 아래칸으로 이동한다.
인형이 있다면 해당 칸에서 인형을 집어 올린다.
크레인이 집어 올린 인형과 바구니의 최상단에 위치한 인형을 비교한다.
같은 모양인 경우, 바구니에서 인형을 꺼낸다. 두 개의 인형이 사라지므로 answer에 2를 더해준다.
다른 모양인 경우, 크레인이 집어 올린 인형을 바구니에 넣는다.
*/
#include <iostream>
#include <string>
#include <vector>
#include <stack>

using namespace std;

int solution(vector<vector<int>> board, vector<int> moves) {
    int answer = 0; // 사라진 인형 개수 카운트
    int height = board.size(); // 격자 높이
    int moves_cnt = moves.size(); // 크레인 작동 횟수
    stack<int> basket;

    // 크레인 작동
    for(int i = 0; i < moves_cnt; i++) {
        int pos = moves[i] - 1;  // 크레인 작동 위치 (열)

        for(int j = 0; j < height; j++) { // (행; 작을수록 높은 위치)
            if(board[j][pos] == 0) { // 상단에 인형이 없는 경우 -> 아래칸 탐색
                continue;
            }

            // 인형 집어올리기
            int doll = board[j][pos];
            board[j][pos] = 0;

            if(!basket.empty() && doll == basket.top()) { // 같은 모양의 인형이 나란히 쌓이는 경우
                basket.pop(); // basket에서 인형 제거하기
                answer += 2;
            }
            else { // 다른 모양의 인형이 나란히 쌓이는 경우
                basket.push(doll); // basket에 인형 쌓기
            }
            break;
        }

    }
    return answer;
}

// 예제 테스트 할 수 있는 메인 함수. 프로그래머스에서는 작성하지 않습니다.
// (최상단에 #include <iostream> 작성 후 실행)
int main() {
    vector<vector<int>> board = {{0,0,0,0,0},{0,0,1,0,3},{0,2,5,0,1},{4,2,4,4,2},{3,5,1,3,1}};
    vector<int> moves = {1,5,3,5,1,2,1,4};

    // 연산
    int result = solution(board, moves);

    // 출력
    cout << result;
    return 0;
}